name: Run PR tests
on: pull_request

jobs:
  pr_tests:
    name: Run PR tests
    runs-on: ubuntu-latest
    env:
      ACTIONS_ALLOW_UNSECURE_COMMANDS: true
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2

      - name: install build-essentials
        run: sudo apt-get -y install build-essential

      - name: install ta-lib
        run: |
          cd /tmp \
          && wget http://prdownloads.sourceforge.net/ta-lib/ta-lib-0.4.0-src.tar.gz \
          && tar xf ta-lib-0.4.0-src.tar.gz \
          && cd ta-lib \
          && ./configure --prefix=/usr \
          && make \
          && sudo make install

      - name: pyenv install
        uses: "gabrielfalcao/pyenv-action@v5"
        with:
          command: pyenv install

      - name: pip install
        run: |
          set -e
          pip install --upgrade pip
          pip install wheel
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: pytest
        run: |
          pytest tests/

      - name: mypy
        run: |
          mypy app.py
          mypy strategies/*.py
          mypy lib/*.py

      - name: pylint
        run: |
          pylint app.py
          pylint lib/*.py
          pylint strategies/*.py

      - name: run backtesting strategies BuyMoonSellRecoveryStrategy.yaml
        run: |
          set -e
          echo BuyMoonSellRecoveryStrategy.yaml
          python app.py -c tests/BuyMoonSellRecoveryStrategy.yaml -m backtesting -s tests/fake.yaml |tail | tee result.txt
          grep ' wins:385 losses:97 stales:107 holds:1' result.txt

      - name: run backtesting strategies BuyOnGrowthTrendAfterDropStrategy.yaml
        run: |
          set -e
          echo BuyOnGrowthTrendAfterDropStrategy.yaml
          python app.py -c tests/BuyOnGrowthTrendAfterDropStrategy.yaml -m backtesting -s tests/fake.yaml | tail | tee result.txt
          grep 'wins:19 losses:1 stales:78 holds:2' result.txt


      - name: run backtesting strategies BuyDropSellRecoveryStrategy.yaml
        run: |
          set -e
          echo BuyDropSellRecoveryStrategy.yaml
          python app.py -c tests/BuyDropSellRecoveryStrategy.yaml -m backtesting -s tests/fake.yaml | tail | tee result.txt
          grep 'wins:4 losses:9 stales:1 holds:0' result.txt

      - name: run backtesting strategies BuyDropSellRecoveryStrategyWhenBTCisUp.yaml
        run: |
          set -e
          echo BuyDropSellRecoveryStrategyWhenBTCisUp.yaml
          python app.py -c tests/BuyDropSellRecoveryStrategyWhenBTCisUp.yaml -m backtesting -s tests/fake.yaml | tail |tee result.txt
          grep 'wins:207 losses:1 stales:648 holds:0' result.txt

      - name: run backtesting strategies BuyDropSellRecoveryStrategyWhenBTCisDown.yaml
        run: |
          set -e
          echo BuyDropSellRecoveryStrategyWhenBTCisDown.yaml
          python app.py -c tests/BuyDropSellRecoveryStrategyWhenBTCisDown.yaml -m backtesting -s tests/fake.yaml | tail | tee result.txt
          grep 'wins:9 losses:0 stales:97 holds:0' result.txt

      - name: run backtesting strategies BuyOnRecoveryAfterDropDuringGrowthTrendStrategy.yaml
        run: |
          set -e
          echo BuyOnRecoveryAfterDropDuringGrowthTrendStrategy.yaml
          python app.py -c tests/BuyOnRecoveryAfterDropDuringGrowthTrendStrategy.yaml -m backtesting -s tests/fake.yaml | tail | tee result.txt
          grep 'wins:116 losses:0 stales:358 holds:0' result.txt

      - name: run backtesting strategies BuyOnRecoveryAfterDropFromAverageStrategy.yaml
        run: |
          set -e
          echo BuyOnRecoveryAfterDropFromAverageStrategy.yaml
          python app.py -c tests/BuyOnRecoveryAfterDropFromAverageStrategy.yaml -m backtesting -s tests/fake.yaml | tail | tee result.txt
          grep 'wins:186 losses:4 stales:599 holds:0' result.txt

      - name: Pull latest upstream base
        run: |
          docker pull bitnami/minideb:bullseye

      - name: local docker-compose build
        run: |
          set -e
          pip install docker-compose
          docker-compose build --no-cache

      - name: run automated-backtesting
        run: |
          set -ex
          echo automated-tests
          LOGFILE=tests/price.log.gz
          CONFIG=tests/automated-backtesting.yaml
          MIN=1
          FILTER=""
          python -u utils/automated-backtesting.py -l ${LOGFILE} -c ${CONFIG} -m ${MIN} -f "${FILTER}" -s "profit"| tail
